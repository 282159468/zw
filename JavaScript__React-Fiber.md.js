(self["webpackChunkzw"]=self["webpackChunkzw"]||[]).push([[1592],{8245:function(e,n,t){"use strict";t.r(n);var i=t(7294),r=t(6089),a=t(5659);t(3132);n["default"]=e=>(i.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&r.AnchorLink.scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{className:"markdown"},i.createElement("h1",{id:"\u4e86\u89e3-fiber"},i.createElement(r.AnchorLink,{to:"#\u4e86\u89e3-fiber","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u4e86\u89e3 Fiber"),i.createElement("p",null,"\u4ece\u5b8f\u89c2\u89d2\u5ea6\u5927\u6982\u4e86\u89e3 Fiber\uff0c\u4e0d\u7ea0\u7ed3\u7ec6\u8282"),i.createElement("h2",{id:"fiber-\u80fd\u505a\u4ec0\u4e48"},i.createElement(r.AnchorLink,{to:"#fiber-\u80fd\u505a\u4ec0\u4e48","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"Fiber \u80fd\u505a\u4ec0\u4e48"),i.createElement("p",null,"Fiber \u4e4b\u524d React \u6e32\u67d3\u7ec4\u4ef6\u65f6\u751f\u6210\u865a\u62df DOM \u4ee5\u53ca\u5bf9\u6bd4\u65b0\u65e7\u865a\u62df DOM \u65f6\uff0c\u4f1a\u957f\u65f6\u95f4\u5360\u7528\u7ebf\u7a0b\uff0c\u7531\u4e8e\u5355\u7ebf\u7a0b\u539f\u56e0\u5bfc\u81f4\u6d4f\u89c8\u5668\u4e0d\u80fd\u54cd\u5e94\u7528\u6237\u64cd\u4f5c\u3002Fiber \u4f5c\u7528\u5728\u4e8e\u5206\u62c6\u8fd9\u90e8\u5206\u4efb\u52a1\uff0c\u6267\u884c\u65f6\u53ef\u4ee5\u6682\u505c\uff0c\u628a\u6743\u9650\u4ea4\u7ed9\u6d4f\u89c8\u5668\u5982\u679c\u6709\u4f18\u5148\u7ea7\u9ad8\u7684\u4efb\u52a1\u4f18\u5148\u8ba9\u6d4f\u89c8\u5668\u6267\u884c\u3002\u7136\u540e\u518d\u6062\u590d\u4e4b\u524d\u6682\u505c\u7684\u4efb\u52a1\u3002"),i.createElement("p",null,"React \u6e32\u67d3\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u4e2a\u90e8\u5206"),i.createElement("ol",null,i.createElement("li",null,"Virtual DOM \u8868\u793a\u9875\u9762 DOM"),i.createElement("li",null,"Reconciler \u5bf9\u6bd4 Virtual DOM \u5dee\u5f02\uff0c\u6267\u884c\u751f\u547d\u5468\u671f\u51fd\u6570"),i.createElement("li",null,"Renderer \u6e32\u67d3\u5668\uff0c\u6bd4\u5982 ReactDOM \u3001ReactNative")),i.createElement("p",null,"\u7531\u4e8e\u4ee5\u4e0a\u673a\u5236 16 \u4e4b\u524d\u7684\u751f\u547d\u5468\u671f compoentWillMount componentWillReceiveProps componentWillUpdate \u5c06\u4f1a\u5e9f\u5f03\uff0c\u56e0\u4e3a\u6682\u505c=>\u6062\u590d\u4f1a\u9020\u6210\u591a\u6b21\u6267\u884c\uff0c\u6240\u4ee5\u751f\u547d\u5468\u671f\u5185\u526f\u4f5c\u7528\u5c31\u4f1a\u53d8\u7684\u4e0d\u53ef\u63a7"),i.createElement("p",null,"\u7ec4\u4ef6\u5728\u7b2c\u4e00\u6b21\u6e32\u67d3\u65f6\u6839\u636e render \u51fd\u6570\u8fd4\u56de\u7684 React Element \u5143\u7d20\u521b\u5efa\u5bf9\u5e94\u7684 Fiber Tree \u53ef\u4ee5\u79f0\u4e3a current\uff0c\u5f53\u66f4\u65b0\u65f6\u4f1a\u521b\u5efa\u65b0\u7684 Fiber \u79f0\u4e3a alternate\uff0c\u5bf9\u6bd4 current \u548c alternate \u7684\u53d8\u5316(side effect)\u8bb0\u5f55\u5230 alternate \u4e0a\uff0c\u66f4\u65b0\u7ed3\u675f\u540e alternate \u53d6\u4ee3 current"),i.createElement("h2",{id:"\u4ec0\u4e48\u662f-fiber"},i.createElement(r.AnchorLink,{to:"#\u4ec0\u4e48\u662f-fiber","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u4ec0\u4e48\u662f Fiber"),i.createElement("p",null,"Fiber \u662f\u4e00\u4e2a\u666e\u901a\u5bf9\u8c61\uff0cFiber \u548c React Element \u5bf9\u5e94\uff0c\u6240\u4ee5 Fiber \u4e5f\u4f1a\u5f62\u6210\u6811\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ee5 return child sibling \u4e09\u4e2a\u5c5e\u6027\u5173\u8054\u4ee5\u94fe\u8868\u5f62\u5f0f\u521b\u5efa"),i.createElement("p",null,"\u901a\u8fc7 return child sibling \u4e09\u4e2a\u5c5e\u6027\u6784\u9020 Fiber \u6811"),i.createElement("ul",{className:"contains-task-list"},i.createElement("li",null,i.createElement("p",null,"return \u8868\u793a\u7236\u8282\u70b9")),i.createElement("li",null,i.createElement("p",null,"child \u8868\u793a\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9")),i.createElement("li",null,i.createElement("p",null,"sibling \u8868\u793a\u5144\u5f1f\u8282\u70b9")),i.createElement("li",{className:"task-list-item"},i.createElement("p",null,i.createElement("input",{type:"checkbox",disabled:!0})," Fiber \u548c Element \u5bf9\u7167\u56fe\u7247"))),i.createElement(a.Z,{code:"export type Fiber = {|\n  // These first fields are conceptually members of an Instance. This used to\n  // be split into a separate type and intersected with the other Fiber fields,\n  // but until Flow fixes its intersection bugs, we've merged them into a\n  // single type.\n\n  // An Instance is shared between all versions of a component. We can easily\n  // break this out into a separate object to avoid copying so much to the\n  // alternate versions of the tree. We put this on a single object for now to\n  // minimize the number of objects created during the initial render.\n\n  // Tag identifying the type of fiber.\n  // Fiber\u7684\u7c7b\u578b,\u5e38\u89c1\u7684ClassComponent\u3001FunctionComponent\u3001HostComponent(DOM)\n  tag: WorkTag,\n\n  // Unique identifier of this child.\n  // \u6682\u65f6\u6ca1\u770b\n  key: null | string,\n\n  // The value of element.type which is used to preserve the identity during\n  // reconciliation of this child.\n\n  // \u6682\u65f6\u6ca1\u770b\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  // \u548cElement\u7684type\u5dee\u4e0d\u591a\u7684\uff0c\u5bf9\u5e94\u7ec4\u4ef6\u7684\u7c7b\u3001\u51fd\u6570\u3001DOM.tagName(div)\n  type: any,\n\n  // The local state associated with this fiber.\n  // \u82f1\u6587\u6ce8\u91ca\u610f\u601d\u662fFiber\u7684\u672c\u5730\u72b6\u6001\n  // \u4f46\u5b9e\u9645\u662f\"\u7ec4\u4ef6\"\u5b9e\u4f8b\uff0cHost\u7c7b\u578b\u7ec4\u4ef6document.createElement('div')\n  stateNode: any,\n\n  // Conceptual aliases\n  // parent : Instance -> return The parent happens to be the same as the\n  // return fiber since we've merged the fiber and instance.\n\n  // Remaining fields belong to Fiber\n\n  // The Fiber to return to after finishing processing this one.\n  // This is effectively the parent, but there can be multiple parents (two)\n  // so this is only the parent of the thing we're currently processing.\n  // It is conceptually the same as the return address of a stack frame.\n  // \u7236\u7ea7Fiber\n  return: Fiber | null,\n\n  // Singly Linked List Tree Structure.\n  // \u94fe\u8868\u7684next\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5b50Fiber\n  child: Fiber | null,\n  // \u5144\u5f1fFiber\n  sibling: Fiber | null,\n  // \u6682\u65f6\u6ca1\u770b\n  index: number,\n\n  // The ref last used to attach this node.\n  // I'll avoid adding an owner field for prod and model that as functions.\n  // \u6682\u65f6\u6ca1\u770b\n  ref:\n    | null\n    | (((handle: mixed) => void) & {_stringRef: ?string, ...})\n    | RefObject,\n\n  // Input is the data coming into process this fiber. Arguments. Props.\n  // \u5373\u5c06\u66f4\u65b0\u7684props\n  pendingProps: any, // This type will be more specific once we overload the tag.\n  // \u5f53\u524d\u7684props\n  memoizedProps: any, // The props used to create the output.\n\n  // A queue of state updates and callbacks.\n  // \u66f4\u65b0\u961f\u5217\n  updateQueue: mixed,\n\n  // The state used to create the output\n  // \u5f53\u524d\u7ec4\u4ef6\u7684state\n  memoizedState: any,\n\n  // Dependencies (contexts, events) for this fiber, if it has any\n  // \u6682\u65f6\u6ca1\u770b\n  dependencies: Dependencies | null,\n\n  // Bitfield that describes properties about the fiber and its subtree. E.g.\n  // the ConcurrentMode flag indicates whether the subtree should be async-by-\n  // default. When a fiber is created, it inherits the mode of its\n  // parent. Additional flags can be set at creation time, but after that the\n  // value should remain unchanged throughout the fiber's lifetime, particularly\n  // before its child fibers are created.\n  // \u4e25\u683c\u6a21\u5f0f\u3001\u5f02\u6b65\u66f4\u65b0\u6a21\u578b\u7b49\n  mode: TypeOfMode,\n\n  //\u66f4\u65b0\u7c7b\u578b\n  // Effect\n  effectTag: SideEffectTag,\n\n  // \u94fe\u8868\uff0c\u4e0b\u4e00\u4e2a\u6709\u66f4\u65b0\u7684Fiber\n  // Singly linked list fast path to the next fiber with side-effects.\n  nextEffect: Fiber | null,\n\n  // The first and last fiber with side-effect within this subtree. This allows\n  // us to reuse a slice of the linked list when we reuse the work done within\n  // this fiber.\n  firstEffect: Fiber | null,\n  lastEffect: Fiber | null,\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  // \u8fc7\u671f\u65f6\u95f4\n  expirationTime: ExpirationTime,\n\n  // This is used to quickly determine if a subtree has no pending changes.\n  childExpirationTime: ExpirationTime,\n\n  // This is a pooled version of a Fiber. Every fiber that gets updated will\n  // eventually have a pair. There are cases when we can clean up pairs to save\n  // memory if we need to.\n  // \u521b\u5efa\u66f4\u65b0\u65f6\u4f1a\u57fa\u4e8e\u5f53\u524d\u7684CurrentFiber(current)\uff0c\u514b\u9686\u4e00\u4e2a\u65b0\u7684WorkInProgerssFiber\n  // \u4ed6\u4eec\u4e92\u4e3a\u66ff\u8eab\n  // current.alternate = WorkInProgerssFiber\n  // WorkInProgerssFiber.alternate = current\n  alternate: Fiber | null,\n\n  // Time spent rendering this Fiber and its descendants for the current update.\n  // This tells us how well the tree makes use of sCU for memoization.\n  // It is reset to 0 each time we render and only updated when we don't bailout.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualDuration?: number,\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number,\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number,\n\n  // Sum of base times for all descendants of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number,\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number,\n  _debugSource?: Source | null,\n  _debugOwner?: Fiber | null,\n  _debugIsCurrentlyTiming?: boolean,\n  _debugNeedsRemount?: boolean,\n\n  // Used to verify that the order of hooks does not change between renders.\n  _debugHookTypes?: Array<HookType> | null,\n|};",lang:"ts"}),i.createElement("p",null,"Fiber \u5c5e\u6027\u5177\u4f53\u542b\u4e49\u8be6\u7ec6",i.createElement(r.Link,{to:"https://juejin.im/post/5d5aa4695188257573635a0d"},"https://juejin.im/post/5d5aa4695188257573635a0d")),i.createElement("p",null,"\u53e6\u5916\u4e00\u4e2a\u66f4\u8be6\u7ec6\u7684",i.createElement(r.Link,{to:"https://github.com/y805939188/simple-react/tree/master/procedure/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/fiber2"},"https://github.com/y805939188/simple-react/tree/master/procedure/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/fiber2")),i.createElement("h2",{id:"fiberroot"},i.createElement(r.AnchorLink,{to:"#fiberroot","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"FiberRoot"),i.createElement("p",null,"RootFiber \u7684\u5b9e\u4f8b"),i.createElement(a.Z,{code:"type BaseFiberRootProperties = {|\n  // The type of root (legacy, batched, concurrent, etc.)\n  tag: RootTag,\n\n  // Any additional information from the host associated with this root.\n  containerInfo: any,\n  // Used only by persistent updates.\n  pendingChildren: any,\n  // The currently active root fiber. This is the mutable root of the tree.\n  current: Fiber,\n\n  pingCache:\n    | WeakMap<Wakeable, Set<ExpirationTime>>\n    | Map<Wakeable, Set<ExpirationTime>>\n    | null,\n\n  finishedExpirationTime: ExpirationTime,\n  // A finished work-in-progress HostRoot that's ready to be committed.\n  finishedWork: Fiber | null,\n  // Timeout handle returned by setTimeout. Used to cancel a pending timeout, if\n  // it's superseded by a new one.\n  timeoutHandle: TimeoutHandle | NoTimeout,\n  // Top context object, used by renderSubtreeIntoContainer\n  context: Object | null,\n  pendingContext: Object | null,\n  // Determines if we should attempt to hydrate on the initial mount\n  +hydrate: boolean,\n  // Node returned by Scheduler.scheduleCallback\n  callbackNode: *,\n  // Expiration of the callback associated with this root\n  callbackExpirationTime: ExpirationTime,\n  // Priority of the callback associated with this root\n  callbackPriority: ReactPriorityLevel,\n  // The earliest pending expiration time that exists in the tree\n  firstPendingTime: ExpirationTime,\n  // The latest pending expiration time that exists in the tree\n  lastPendingTime: ExpirationTime,\n  // The earliest suspended expiration time that exists in the tree\n  firstSuspendedTime: ExpirationTime,\n  // The latest suspended expiration time that exists in the tree\n  lastSuspendedTime: ExpirationTime,\n  // The next known expiration time after the suspended range\n  nextKnownPendingLevel: ExpirationTime,\n  // The latest time at which a suspended component pinged the root to\n  // render again\n  lastPingedTime: ExpirationTime,\n  lastExpiredTime: ExpirationTime,\n  // Used by useMutableSource hook to avoid tearing within this root\n  // when external, mutable sources are read from during render.\n  mutableSourceLastPendingUpdateTime: ExpirationTime,\n|};\n\n// The following attributes are only used by interaction tracing builds.\n// They enable interactions to be associated with their async work,\n// And expose interaction metadata to the React DevTools Profiler plugin.\n// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.\ntype ProfilingOnlyFiberRootProperties = {|\n  interactionThreadID: number,\n  memoizedInteractions: Set<Interaction>,\n  pendingInteractionMap: PendingInteractionMap,\n|};\n\nexport type SuspenseHydrationCallbacks = {\n  onHydrated?: (suspenseInstance: SuspenseInstance) => void,\n  onDeleted?: (suspenseInstance: SuspenseInstance) => void,\n  ...\n};\n\n// The follow fields are only used by enableSuspenseCallback for hydration.\ntype SuspenseCallbackOnlyFiberRootProperties = {|\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n|};\n\n// Exported FiberRoot type includes all properties,\n// To avoid requiring potentially error-prone :any casts throughout the project.\n// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).\n// The types are defined separately within this file to ensure they stay in sync.\n// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)\nexport type FiberRoot = {\n  ...BaseFiberRootProperties,\n  ...ProfilingOnlyFiberRootProperties,\n  ...SuspenseCallbackOnlyFiberRootProperties,\n  ...\n};",lang:"js"}),i.createElement("h2",{id:"return-child-sibling-\u5c5e\u6027"},i.createElement(r.AnchorLink,{to:"#return-child-sibling-\u5c5e\u6027","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"return child sibling \u5c5e\u6027"),i.createElement("h2",{id:"alternate-current-\u5c5e\u6027"},i.createElement(r.AnchorLink,{to:"#alternate-current-\u5c5e\u6027","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"alternate current \u5c5e\u6027"),i.createElement("p",null,"\u521d\u59cb\u6e32\u67d3\u65f6\u751f\u6210 Fiber \u6811\uff08A\uff09\uff0c\u66f4\u65b0\u65f6\u751f\u6210\u4e00\u4e2a\u5305\u542b\u65b0\u72b6\u6001\u7684 Fiber \u6811\uff08B\uff09\uff0cB.FiberX.current \u6307\u5411 A.FiberX\uff0cA.FiberX.alternate \u6307\u5411 B"),i.createElement("p",null,"\u5373 current \u8868\u793a\u5f53\u524d\u72b6\u6001\u7684 Fiber\uff0calternate \u8868\u793a\u5373\u5c06\u66f4\u65b0\u7684 Fiber"),i.createElement("h2",{id:"requestidlecallback"},i.createElement(r.AnchorLink,{to:"#requestidlecallback","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"requestIdleCallback"),i.createElement("p",null,"\u4e0a\u9762\u63d0\u5230\u7684 Fiber \u4f1a\u8ba9\u6743\u7ed9\u6d4f\u89c8\u5668\uff0c\u7b49\u5f85\u6d4f\u89c8\u7a7a\u95f2\u65f6\u518d\u6062\u590d\u6267\u884c\uff0c\u8fd9\u91cc\u7684\u7a7a\u95f2\u5c31\u9700\u8981\u501f\u52a9 requestIdleCallback \u501f\u53e3\uff0crequestIdleCallback(fn )\uff0c\u8868\u793a fn \u5728\u4e0b\u4e00\u6b21\u4e8b\u4ef6\u5faa\u73af\u524d\u6267\u884c"),i.createElement("h2",{id:"\u4f18\u5148\u7ea7\u5982\u4f55\u8ba1\u7b97"},i.createElement(r.AnchorLink,{to:"#\u4f18\u5148\u7ea7\u5982\u4f55\u8ba1\u7b97","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u4f18\u5148\u7ea7\u5982\u4f55\u8ba1\u7b97"),i.createElement("h2",{id:"\u7ec4\u4ef6\u6570\u636e\u7684\u8f93\u51fa"},i.createElement(r.AnchorLink,{to:"#\u7ec4\u4ef6\u6570\u636e\u7684\u8f93\u51fa","aria-hidden":"true",tabIndex:-1},i.createElement("span",{className:"icon icon-link"})),"\u7ec4\u4ef6\u6570\u636e\u7684\u8f93\u51fa"),i.createElement("p",null,"\u7ec4\u4ef6\u7684\u901a\u8fc7 Fiber \u4e0a\u7684\u6570\u636e\u66f4\u65b0 state props\uff0c\u6240\u4ee5\u624d\u6709 Hooks \u8ba9\u51fd\u6570\u7ec4\u4ef6\u6709\u4e86\u72b6\u6001\uff0c\u5728\u8fd9\u4e4b\u524d\u56e0\u4e3a\u51fd\u6570\u7ec4\u4ef6\u6ca1\u6709 this \u6ca1\u529e\u6cd5\u4fdd\u5b58 state"),i.createElement("p",null,i.createElement(r.Link,{to:"https://github.com/jianjiachenghub/react-deeplearn/tree/master/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"},"https://github.com/jianjiachenghub/react-deeplearn/tree/master/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0")),i.createElement(a.Z,{code:"",lang:"unknown"}))))}}]);